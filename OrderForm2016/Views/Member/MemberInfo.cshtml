@model List<OrderForm2016.Models.Member>
@using OrderForm2016.Helpers


@{
	if (ViewBag.isHockey != null)
	{
		ViewBag.Title = "Player Info";

	}
	else
	{
		ViewBag.Title = "Member Info";
	}


	List<SelectListItem> GenderList = new List<SelectListItem>();
	GenderList.Add(new SelectListItem
	{
		Text = "M",
		Value = "Male"
	});
	GenderList.Add(new SelectListItem
	{
		Text = "F",
		Value = "Female",
	});
}


<section class="page-title">
	<div class="container">
		@{
			string pTitle;
			if (ViewBag.isHockey != null)
			{
				pTitle = "Player Info";

			}
			else
			{
				pTitle = "Member Info";
			}
		}

		<h2>@ViewBag.ProductName  @pTitle</h2>
		@if (ViewBag.ProductDesc != ViewBag.ProductName)
		{
		<h4>@ViewBag.ProductDesc</h4>
		}
	</div>
</section>


<section>
	<div class="container">
		@{
			bool isLocal = HttpContext.Current.Request.IsLocal;
			object formAttr = isLocal ? (object)new { @id = "memberform" } : new { @id = "memberform", @autocomplete = "off" };
		}
		@using (Html.BeginForm("GetCCInfo", "CreditCard", new { bFormID = Model[0].base_form_id }, FormMethod.Post, new { @id = "memberform" }))
		{
		@Html.AntiForgeryToken()
			@Html.ValidationSummary(true, "", new { @class = "text-danger" })
			@Html.HiddenFor(m => m[0].base_form_id, new { @id = "bFormID" })

			if (ViewBag.TripCanIncluded != null)
			{
			@Html.Hidden("tripCanIncluded", (bool)ViewBag.TripCanIncluded)
			}

			<div class="row">
				<div class="col-sm-9">

					<div id="errorMsg">
					</div>

					<div class="widget">

						<div class="widget-block">

							<div class="widget-block">
								@{
									string pTitle2;
									if (ViewBag.isHockey != null)
									{
										pTitle2 = "Player";
										@Html.Hidden("isHockey")

									}
									else
									{
										pTitle2 = "Member";
									}
								}
								<h3 class="widget-title"><strong>@pTitle2</strong> Information</h3>
							</div>

							@{
								int prodId = ViewBag.ProductId;
								int adults = 0;
								int children = 0;

								for (int i = 0; i < Model.Count; i++)
								{
								@Html.HiddenFor(m => m[i].traveler_age_id)
									int age = Model[i].TravelerAge;
									string type = Model[i].memType;
									string title = "Spouse";

									if (type == "trav")
									{
										title = "Traveler " + (++adults);
									}
									else if (type == "child")
									{
										title = "Child " + (++children);
									}
									<fieldset data-traveler-id="@Model[i].traveler_age_id">

										@Html.HiddenFor(m => m[i].memType)
										@Html.HiddenFor(x => x[i].TripCost)

										@if (ViewBag.IsHockey != null && ViewBag.IsHockey == true)
										{
										<h5 class="widget-subtitle">@title - <span class="age">Up to age 21</span></h5>
										}
										else
										{
										<h5 class="widget-subtitle">@title - Age <span class="age">@age</span></h5>
										}


										<div class="row">
											<div class="col-md-4  col-lg-2">
												<div class="form-group">
													@Html.LabelFor(m => m[i].firstName, "First Name", new { @class = "control-label" })
													@Html.EditorFor(m => m[i].firstName, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
													@Html.ValidationMessageFor(m => m[i].firstName, "", new { @class = "text-danger" })
												</div>
											</div>
											<div class="col-md-4  col-lg-2">
												<div class="form-group">
													@Html.LabelFor(m => m[i].midName, "Middle Name", new { @class = "control-label" })
													@Html.EditorFor(m => m[i].midName, new { htmlAttributes = new { @class = "form-control" } })
													@Html.ValidationMessageFor(m => m[i].midName, "", new { @class = "text-danger" })
												</div>
											</div>
											<div class="col-md-4  col-lg-3">
												<div class="form-group">
													@Html.LabelFor(m => m[i].lastName, "Last Name", new { @class = "control-label" })
													@Html.EditorFor(m => m[i].lastName, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
													@Html.ValidationMessageFor(m => m[i].lastName, "", new { @class = "text-danger" })
												</div>
											</div>
											<div class="col-md-4  col-lg-2">
												<div class="form-group date dob-">
													@Html.LabelFor(m => m[i].DOB, "Date of Birth", new { @class = "control-label" })
													@if (ViewBag.ProductId == 43 && Session["isFromQuoteForm"] == null)
													{
													@Html.TextBoxFor(m => m[i].DOB, "{0:d}", new { @class = "form-control", @readonly = true })
													}
													else
													{
														// this pattern does leap years too
														//string dateRegex = "(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))";
														string dateRegex = "\\d{1,2}/\\d{1,2}/\\d{4}";
														@Html.TextBox(Html.NameFor(m => m[i].DOB).ToString(), "", new { @class = "form-control dob", placeholder = "mm/dd/yyyy", pattern = @dateRegex, @data_eff_date = @ViewBag.DepartureDate.ToShortDateString(), @data_member_age = @age.ToString(), @data_member_id = @Model[i].memberCount.ToString(), @data_matrix = @ViewBag.isVisitorsMatrix, @required = "required" })
													}
													@if (ViewBag.InvalidDOB != null)
													{
													<span class="text-danger">@ViewBag.InvalidDOB</span>
													}
													else {
													@Html.ValidationMessageFor(m => m[i].DOB, "", new { @class = "text-danger" })
													}
												</div>
											</div>
											<div class="col-md-4  col-lg-2">
												<div class="form-group">
													@Html.LabelFor(m => m[i].passPort, "Passport", new { @class = "control-label" })
													@Html.EditorFor(m => m[i].passPort, new { htmlAttributes = new { @class = "form-control" } })
													@Html.ValidationMessageFor(m => m[i].passPort, "", new { @class = "text-danger" })
												</div>
											</div>
											<div class="col-md-4  col-lg-1">
												<div class="form-group">
													@Html.LabelFor(m => m[i].gender, "Gender", new { @class = "control-label" })
													@Html.DropDownListFor(m => m[i].gender, @GenderList, new { @class = "form-control" })
													@Html.ValidationMessageFor(m => m[i].gender, "", new { @class = "text-danger" })
												</div>
											</div>
										</div><!-- /.row -->

									</fieldset>
								}
							}


							<fieldset>
								@*<h3 class="widget-title"><strong>Contact</strong> Information</h3>*@

								<div class="row">
									<div class="col-md-6">
										<div class="form-group">
											@Html.LabelFor(m => m[0].email, "Primary Email", new { @class = "control-label" })
											@Html.EditorFor(m => m[0].email, new { htmlAttributes = new { @class = "form-control", @type = "email", @required = "required" } })
											@Html.ValidationMessageFor(m => m[0].email, "", new { @class = "text-danger" })
										</div>
									</div>
									<div class="col-md-6">
										<div class="form-group">
											@Html.LabelFor(m => m[0].phone, "Primary Phone #", new { @class = "control-label" })
											@Html.EditorFor(m => m[0].phone, new { htmlAttributes = new { @class = "form-control", @type = "tel", @required = "required" } })
											@Html.ValidationMessageFor(m => m[0].phone, "", new { @class = "text-danger" })
										</div>
									</div>
									@if (Model[0].isSchool)
									{
									<div class="col-md-6">
										<div class="form-group">
											@Html.LabelFor(m => m[0].school_name, "School Name", new { @class = "control-label" })
											@Html.EditorFor(m => m[0].school_name, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
											@Html.ValidationMessageFor(m => m[0].school_name, "", new { @class = "text-danger" })
										</div>
									</div>
									}
								</div><!-- /.row -->
							</fieldset>

							<div class="help-block  pull-right"><strong class="text-danger">*</strong> where you currently live and call home</div>
							<h3 class="widget-title"><strong>Address</strong> Information</h3>

							<fieldset>
								@*<hr />*@

								<div class="form-group">
									@Html.LabelFor(m => m[0].addr1, (prodId == 43 ? "USA" : "Home Country") + " Address", new { @class = "control-label" }) <span class="text-danger">*</span>
									@Html.EditorFor(m => m[0].addr1, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
									@Html.ValidationMessageFor(m => m[0].addr1, "", new { @class = "text-danger" })
								</div>

								<div class="row">
									<div class="col-md-6">
										<div class="form-group">
											@Html.LabelFor(m => m[0].city, (prodId == 43 ? "USA" : "Home Country") + " City", new { @class = "control-label" }) <span class="text-danger">*</span>
											@Html.EditorFor(m => m[0].city, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
											@Html.ValidationMessageFor(m => m[0].city, "", new { @class = "text-danger" })
										</div>
									</div>

									@if (Model[0].country.Trim() == "US")
									{
									<div class="col-md-3">
										<div class="form-group">
											@Html.LabelFor(m => m[0].state, (prodId == 43 ? "USA" : "Home Country") + " State", new { @class = "control-label" }) <span class="text-danger">*</span>
											@if (prodId == 43)
											{
											@Html.EditorFor(m => m[0].state, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
											}
											else
											{
												if ((bool)ViewBag.TripCanIncluded)
												{
												@Html.EditorFor(m => m[0].state, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
												}
												else
												{
													if (prodId > 64 && prodId < 68)
													{
													@Html.DropDownListFor(m => m[0].state, (SelectList)ViewBag.StateList, new { @class = "form-control", @readonly = "readonly" })
													}
													else
													{
													@Html.DropDownListFor(m => m[0].state, (SelectList)ViewBag.StateList, new { @class = "form-control" })
													}
												}
											}
											@Html.ValidationMessageFor(m => m[0].state, "", new { @class = "text-danger" })
										</div>
									</div>
									}
									@if (Model[0].country.Trim() != "US")
									{
									<div class="col-md-3">
										<div class="form-group">
											@Html.LabelFor(m => m[0].state, (prodId == 43 ? "USA" : "Home Country") + " State", new { @class = "control-label" }) <span class="text-danger">*</span>
											@*@Html.DropDownListFor(m => m[0].state, (SelectList)ViewBag.StateList, "Select State", new { @class = "form-control" })*@
											@Html.EditorFor(m => m[0].state, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
											@Html.ValidationMessageFor(m => m[0].state, "", new { @class = "text-danger" })
										</div>
									</div>
									}
									<div class="col-md-3">
										<div class="form-group">
											@Html.LabelFor(m => m[0].zip, "Postal Code", new { @class = "control-label" }) <span class="text-danger">*</span>
											@*@Html.EditorFor(m => m[0].zip, "{0:#####}", new { htmlAttributes = new { @class = "form-control", @required = "required" } })*@
											@Html.EditorFor(m => m[0].zip, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
											@Html.ValidationMessageFor(m => m[0].zip, "", new { @class = "text-danger" })
										</div>
									</div>
								</div><!-- /.row -->


								<div class="form-group">
									@Html.LabelFor(m => m[0].country, "Home Country", new { @class = "control-label" }) <span class="text-danger">*</span>
									@*<div class="help-block  inline  small">(where you currently live and call home)</div>*@
									@Html.DropDownListFor(m => m[0].country, (SelectList)ViewBag.MemberCountryList, "Select Country", new { @class = "form-control", @required = "required" })
									@*@Html.EditorFor(m => m[0].country, new { htmlAttributes = new { @class = "form-control" } })*@
								</div>

							</fieldset>

						</div><!-- /.widget-block -->

						<div class="widget-footer  form-submit">
							<button type="button" class="btn  btn-default  btn-prev"><i class="fa  fa-caret-left"></i> Previous</button>
							<button type="submit" class="btn  btn-primary  btn-next">Continue <i class="fa  fa-caret-right"></i></button>
						</div>

					</div><!-- /.widget -->
				</div><!-- /.col -->


				<div class="col-sm-3">
					@Html.Partial("_SideLogos")
				</div><!-- /.col -->

			</div><!-- /.row -->}
	</div><!-- /.container -->
</section>


@section Scripts {
	@Scripts.Render("~/bundles/jqueryval")
	<script src="/scripts/main.js"></script>
	<script src="/scripts/AgeBands.js"></script>
	<script src="/scripts/memberinfo.js"></script>
}


@section Modals {
	<div class="modal  fade" tabindex="-1" role="dialog" id="ageband" data-backdrop="static" data-keyboard="false">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					@*<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>*@
					<h4 class="modal-title"></h4>
				</div>
				<div class="modal-body">
				</div>
				<div class="modal-footer">
					<button type="button" class="btn  btn-success  hidden" data-dismiss="modal">Accept</button>
					<button type="button" class="btn  btn-default" id="cancelAgeBand">Cancel</button>
					<button type="button" class="btn  btn-primary" id="updateAgeBand">Update Quote</button>
				</div>
			</div><!-- /.modal-content -->
		</div><!-- /.modal-dialog -->
	</div><!-- /.modal -->
}